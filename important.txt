If you see any randome image,

1) Add your image to IPFS
2) Add a metadata file pointing to that image file present in IPFS
3) Then grab that token uri of metadata and set is as your NFT.

In order to see your files on IPFs, open IPFS desktop, copy the CID link, and then paste it like: 
a) 'ipfs://link' -> ipfs://QmchKkxGb2MZ7s1h8CAaiatrvdW8UjraSkvHjQxDorAbta -> This direclty link to ipfs network which is distributed
OR
b) 'ipfs.io/ipfs/link' -> https://ipfs.io/ipfs/QmchKkxGb2MZ7s1h8CAaiatrvdW8UjraSkvHjQxDorAbta -> This links to ipfs centralised website

- Type 'chisel' in terminal to enter an arena, where you can try randome codes and etc.

1) forge install ChainAccelOrg/foundry-devops -> to install all necessary contracts

2) make deploy ARGS="--network sepolia" -> To deploy the project on Sepolia testnet
- Dont forget ETHERSCAN api key from etherscal
- Dont forget RPC_URL from alchemy
- Dont forget PRIVATE_KEY from metamask (account having sepolia testnet)

3) make mint ARGS="--network sepolia" -> Run this command also to mint the NFT

4) In order to see your NFT on metamask, do the following process: 
    a) Copy the address of contract (When you run command 2), you get link of etherscan -> Go to that link -> Go to contract section -> Copy the contract address )
    b) Now Go to metamask and import NFT
    c) Enter the address and enter Id (starts with 0 , u enter 0 at start ).

5) After cloning a repo with submodules, you must run this command to initialize and fetch all submodules:
    git submodule update --init --recursive

6) To open your svg, 
    a) Create svg
    b) Go to images directory (cd images )
    c) base64 --i example.svg
    d) copy the url and then use it as done below
    e) Now paste that whole link on google.
HERE --->
For example.svg (The below link is image uri, not token uri , token uri is abcd.json)
data:image/svg+xml;base64,
PHN2ZyB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHhtbG5zOnhsaW5rPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rIiB3aWR0aD0iNTAwIiBoZWlnaHQ9IjUwMCI+Cjx0ZXh0IHg9IjAiIHk9IjE1IiBmaWxsPSJ3aGl0ZSI+SGkhIFlvdXIgYnJvd3NlciBkZWNvZGVkIHRoaXM8L3RleHQ+Cjwvc3ZnPg==

For happy.svg
data:image/svg+xml;base64,
PHN2ZyB2aWV3Qm94PSIwIDAgMjAwIDIwMCIgd2lkdGg9IjQwMCIgIGhlaWdodD0iNDAwIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogIDxjaXJjbGUgY3g9IjEwMCIgY3k9IjEwMCIgZmlsbD0ieWVsbG93IiByPSI3OCIgc3Ryb2tlPSJibGFjayIgc3Ryb2tlLXdpZHRoPSIzIi8+CiAgPGcgY2xhc3M9ImV5ZXMiPgogICAgPGNpcmNsZSBjeD0iNzAiIGN5PSI4MiIgcj0iMTIiLz4KICAgIDxjaXJjbGUgY3g9IjEyNyIgY3k9IjgyIiByPSIxMiIvPgogIDwvZz4KICA8cGF0aCBkPSJtMTM2LjgxIDExNi41M2MuNjkgMjYuMTctNjQuMTEgNDItODEuNTItLjczIiBzdHlsZT0iZmlsbDpub25lOyBzdHJva2U6IGJsYWNrOyBzdHJva2Utd2lkdGg6IDM7Ii8+Cjwvc3ZnPg==

For sad.svg
data:image/svg+xml;base64,
PD94bWwgdmVyc2lvbj0iMS4wIiBzdGFuZGFsb25lPSJubyI/Pgo8c3ZnIHdpZHRoPSIxMDI0cHgiIGhlaWdodD0iMTAyNHB4IiB2aWV3Qm94PSIwIDAgMTAyNCAxMDI0IiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciPgogICAgPHBhdGggZmlsbD0iIzMzMyIKICAgICAgICBkPSJNNTEyIDY0QzI2NC42IDY0IDY0IDI2NC42IDY0IDUxMnMyMDAuNiA0NDggNDQ4IDQ0OCA0NDgtMjAwLjYgNDQ4LTQ0OFM3NTkuNCA2NCA1MTIgNjR6bTAgODIwYy0yMDUuNCAwLTM3Mi0xNjYuNi0zNzItMzcyczE2Ni42LTM3MiAzNzItMzcyIDM3MiAxNjYuNiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzIgMzcyeiIgLz4KICAgIDxwYXRoIGZpbGw9IiNFNkU2RTYiCiAgICAgICAgZD0iTTUxMiAxNDBjLTIwNS40IDAtMzcyIDE2Ni42LTM3MiAzNzJzMTY2LjYgMzcyIDM3MiAzNzIgMzcyLTE2Ni42IDM3Mi0zNzItMTY2LjYtMzcyLTM3Mi0zNzJ6TTI4OCA0MjFhNDguMDEgNDguMDEgMCAwIDEgOTYgMCA0OC4wMSA0OC4wMSAwIDAgMS05NiAwem0zNzYgMjcyaC00OC4xYy00LjIgMC03LjgtMy4yLTguMS03LjRDNjA0IDYzNi4xIDU2Mi41IDU5NyA1MTIgNTk3cy05Mi4xIDM5LjEtOTUuOCA4OC42Yy0uMyA0LjItMy45IDcuNC04LjEgNy40SDM2MGE4IDggMCAwIDEtOC04LjRjNC40LTg0LjMgNzQuNS0xNTEuNiAxNjAtMTUxLjZzMTU1LjYgNjcuMyAxNjAgMTUxLjZhOCA4IDAgMCAxLTggOC40em0yNC0yMjRhNDguMDEgNDguMDEgMCAwIDEgMC05NiA0OC4wMSA0OC4wMSAwIDAgMSAwIDk2eiIgLz4KICAgIDxwYXRoIGZpbGw9IiMzMzMiCiAgICAgICAgZD0iTTI4OCA0MjFhNDggNDggMCAxIDAgOTYgMCA0OCA0OCAwIDEgMC05NiAwem0yMjQgMTEyYy04NS41IDAtMTU1LjYgNjcuMy0xNjAgMTUxLjZhOCA4IDAgMCAwIDggOC40aDQ4LjFjNC4yIDAgNy44LTMuMiA4LjEtNy40IDMuNy00OS41IDQ1LjMtODguNiA5NS44LTg4LjZzOTIgMzkuMSA5NS44IDg4LjZjLjMgNC4yIDMuOSA3LjQgOC4xIDcuNEg2NjRhOCA4IDAgMCAwIDgtOC40QzY2Ny42IDYwMC4zIDU5Ny41IDUzMyA1MTIgNTMzem0xMjgtMTEyYTQ4IDQ4IDAgMSAwIDk2IDAgNDggNDggMCAxIDAtOTYgMHoiIC8+Cjwvc3ZnPg==
So, this whole link seems like a tokenURI , so we will now use the data on chain, using this svg process.

                            || *********** ||

To run the scripts (particular scirpt) , run -> forge script script/abcd.sol 

To deploy contract
1st terminal -> make anvil , Create a new chain if LocalHost on metamask with 1000ETH(comes with ETH automatically)
2nd terminal -> make deploye , then run below command.
cast send 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266 "mintNft()" --private-key ac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80 --rpc-url http://127.0.0.1:8545 

The above address is contract address got from 1st terminal